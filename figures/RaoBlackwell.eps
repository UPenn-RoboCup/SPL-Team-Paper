%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 8
%%For: (Daniel D Lee) (Univ. of Pennsylvania)
%%Title: (hybrid2.eps)
%%CreationDate: (3/13/03) (12:49 AM)
%%BoundingBox: 82 217 530 573
%%HiResBoundingBox: 82.5 217.833 529.5 572.1665
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 13 13 599 780
%AI3_DocumentPreview: Header
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -13 635 1 1016 675 18 0 1 10 67 0 1
%AI5_OpenViewLayers: 7
%%PageOrigin:13 13
%%AI3_PaperRect:-13 780 599 -12
%%AI3_Margin:13 -13 -13 12
%AI7_GridSettings: 72 16 72 16 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationColorNames get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					] /DeviceCMYK {}
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D
0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D
0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D
0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D
0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient)
(Unnamed gradient) 1 2 Bd
[
<
1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041
42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566676869
6A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091
92939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1
E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0 0 0 0.9 1 50 0 %_Bs
0 0 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Black, White)
(Black, White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Chrome)
(Chrome) 0 6 Bd
[
0
<
464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B
3B3B3B3A3A3A39393939383838383737373636363635353535343434333333333232323131313130
3030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A292929282828282727272626262625
2525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A
1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F
0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A09090909080808070707070606060505050504
04040403030302020202010101010000
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A
1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515
15151515151414141414141414131313131313131312121212121212121211111111111111111010
1010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C
0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A090909090909090909080808080808080807070707070707
07060606060606060606050505050505050504040404040404040303030303030303030202020202
02020201010101010101010000000000
>
1 %_Br
0
0.275
1
<
6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544
434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F
>
1 %_Br
0
<
00000101010102020202030303040404040505050606060607070707080808090909090A0A0A0A0B
0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101111111112121212131313141414141515151516
161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021
212122222222232323232424242525252526262627272727282828282929292A2A2A2A2B2B2B2B2C
2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313232323233333333343434353535353636363637
373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F404040404141414142
42424343434344444444454545464646
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F101010
1111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121
222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F303031313232
32333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243
4344444445454646474747484849494A4A4A4B4B4C4C4C4D4D4E4E4F4F4F50505151515252535354
54545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F606061616162626363646464
6565666666676768686969696A6A6B6B
>
1 %_Br
1
0 %_Br
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141
414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A39393938383838373737363636353535
35343434333333323232323131313030302F2F2F2F2E2E2E2D2D2D2C2C2C2C2B2B2B2A2A2A292929
2928282827272726262626252525242424232323232222222121212020201F1F1F1F1E1E1E1D1D1D
1C1C1C1C1B1B1B1A1A1A191919191818181717171616161615151514141413131313121212111111
101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A09090908080807070707060606050505
04040404030303020202010101010000
>
0
0
1 %_Br
[
1 0 50 92 %_Bs
0 0.275 1 0.12 1 50 59 %_Bs
0 0.275 1 0.42 1 50 50 %_Bs
1 0 50 49 %_Bs
1 0 50 41 %_Bs
1 0.3 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060607070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_Bs
1 1 0 0 1 50 80 %_Bs
1 0.0279 0 0 1 50 60 %_Bs
1 0 1 0 1 50 40 %_Bs
0 0 1 0 1 50 20 %_Bs
0 1 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_Bs
0 0.55 0.9 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([Registration]) Pc
0 0 0 0 k
(C=0 M=0 Y=0 K=0) Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100) Pc
0 0.1 1 0 k
(C=0 M=10 Y=100 K=0) Pc
0 0.5 0 0 k
(C=0 M=50 Y=0 K=0) Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0) Pc
1 0.55 1 0 k
(C=100 M=55 Y=100 K=0) Pc
1 0.9 0.1 0 k
(C=100 M=90 Y=10 K=0) Pc
0.15 1 1 0 k
(C=15 M=100 Y=100 K=0) Pc
0.45 0.9 0 0 k
(C=45 M=90 Y=0 K=0) Pc
0.5 0.4 0.3 0 k
(C=50 M=40 Y=30 K=0) Pc
0.5 0.85 1 0 k
(C=50 M=85 Y=100 K=0) Pc
0.75 0.05 1 0 k
(C=75 M=5 Y=100 K=0) Pc
0.75 0.9 0 0 k
(C=75 M=90 Y=0 K=0) Pc
0.8 0.05 0 0 k
(C=80 M=5 Y=0 K=0) Pc
Bb
2 (Black, White) -7885 8587 0 0 1 0 0 1 0 0 Bg
0 BB
(Black, White) Pc
Bb
2 (Chrome) -7885 8587 0 0 1 0 0 1 0 0 Bg
0 BB
(Chrome) Pc
Bb
2 (Rainbow) -7885 8587 0 0 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) -7885 8587 0 0 1 0 0 1 0 0 Bg
0 BB
(Yellow & Orange Radial) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
270 360 m
270 352.5439 263.9561 346.5 256.5 346.5 c
249.0439 346.5 243 352.5439 243 360 c
243 367.4561 249.0439 373.5 256.5 373.5 c
263.9561 373.5 270 367.4561 270 360 c
Bb
0 0 0 0 Bh
1 (Unnamed gradient) 324 378 0 13.5 1 0 0 1 -67.5 18 Bg
13.5 0 0 -13.5 256.5 360 Bm
f0 BB
uuuq0 Ap
300 Ar
174.5835 414.1665 m
174.5835 373.917 l
214.8335 373.917 l
214.8335 414.1665 l
174.5835 414.1665 l
hWn/BBAccumRotation (0.000000) XT
0 O
0.45 0.9 0 0 k
0 R
0 0 0 1 K
1 j 10 M204.6401 394.0801 m
204.6401 388.5596 200.1602 384.0801 194.6401 384.0801 c
189.1201 384.0801 184.6401 388.5596 184.6401 394.0801 c
184.6401 399.6001 189.1201 404.0801 194.6401 404.0801 c
200.1602 404.0801 204.6401 399.6001 204.6401 394.0801 c
B/BBAccumRotation (0.000000) XT
Q/BBAccumRotation (0.000000) XT
0 A
u0 R
0 G
300 Ar
0 J 1 j 1 w 10 M []0 d%AI3_Note:0 D
0 XR
255.5835 358.917 m
255.5835 376.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M255.5835 383.5605 m
259.6484 373.6113 l
255.5835 375.9727 l
251.519 373.6113 l
255.5835 383.5605 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d264.8335 374.833 m
264 375.167 l
263.1665 375.417 l
262.25 375.417 l
261.1665 375.333 l
260.1665 375 l
259 374.583 l
257.9165 374 l
256.75 373.25 l
255.5835 372.417 l
254.4165 371.417 l
253.25 370.25 l
252.0835 369.083 l
251 367.75 l
249.9165 366.333 l
248.9165 364.833 l
248 363.25 l
247.0835 361.667 l
246.3335 360.083 l
245.6665 358.5 l
245.0835 356.833 l
244.5835 355.25 l
244.1665 353.667 l
243.8335 352.167 l
243.6665 350.75 l
243.6665 349.333 l
243.75 348.083 l
243.9165 346.917 l
244.1665 345.833 l
244.5835 344.917 l
245.0835 344.083 l
245.6665 343.417 l
246.4165 342.917 l
247.1665 342.583 l
248.0835 342.417 l
249 342.333 l
250 342.5 l
251.0835 342.75 l
252.1665 343.167 l
253.3335 343.75 l
254.5 344.5 l
255.6665 345.333 l
256.8335 346.333 l
258 347.5 l
259.0835 348.75 l
260.25 350.083 l
261.25 351.5 l
262.25 352.917 l
263.25 354.5 l
264.0835 356.083 l
264.9165 357.667 l
265.5835 359.333 l
266.1665 360.917 l
266.6665 362.5 l
267.0835 364.083 l
267.3335 365.583 l
267.5 367.083 l
267.5835 368.417 l
267.5 369.75 l
267.3335 370.917 l
267 371.917 l
266.6665 372.917 l
266.1665 373.667 l
265.5 374.333 l
264.833 374.833 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d264.4165 384.917 m
257.6665 401.1665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M254.958 407.687 m
262.5288 400.0576 l
257.8691 400.6792 l
255.0215 396.9395 l
254.958 407.687 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d266.8335 403.1665 m
266 403.1665 l
265.0835 403 l
264.25 402.75 l
263.3335 402.25 l
262.4165 401.5835 l
261.5835 400.75 l
260.75 399.75 l
260 398.6665 l
259.25 397.3335 l
258.5 396 l
257.9165 394.5 l
257.3335 392.917 l
256.75 391.333 l
256.3335 389.583 l
256 387.833 l
255.75 386.083 l
255.5 384.25 l
255.417 382.417 l
255.417 380.667 l
255.5 379 l
255.5835 377.333 l
255.8335 375.667 l
256.1665 374.167 l
256.5835 372.75 l
257.0835 371.5 l
257.5835 370.333 l
258.1665 369.333 l
258.9165 368.417 l
259.5835 367.75 l
260.4165 367.167 l
261.1665 366.833 l
262 366.583 l
262.9165 366.583 l
263.75 366.75 l
264.6665 367.083 l
265.5835 367.583 l
266.4165 368.25 l
267.25 369.083 l
268.0835 370.083 l
268.9165 371.167 l
269.6665 372.417 l
270.3335 373.75 l
271 375.25 l
271.5835 376.833 l
272.0835 378.5 l
272.5 380.167 l
272.9165 382 l
273.1665 383.75 l
273.3335 385.583 l
273.5 387.333 l
273.5 389.083 l
273.4165 390.833 l
273.25 392.5 l
273 394.083 l
272.75 395.5835 l
272.3335 397 l
271.8335 398.25 l
271.25 399.4165 l
270.6665 400.5 l
270 401.3335 l
269.25 402.0835 l
268.5 402.5835 l
267.6665 403 l
266.8335 403.1665 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d262.6665 412.3335 m
250.1665 424.75 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M245.1572 429.7256 m
255.0811 425.5977 l
250.541 424.3779 l
249.3521 419.8301 l
245.1572 429.7256 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d257.8335 430.0835 m
257.0835 429.8335 l
256.3335 429.3335 l
255.5835 428.6665 l
255 427.9165 l
254.4165 426.9165 l
253.9165 425.8335 l
253.5835 424.5835 l
253.25 423.25 l
253.0835 421.8335 l
252.9165 420.3335 l
252.9165 418.6665 l
253 417 l
253.0835 415.25 l
253.4165 413.5 l
253.75 411.75 l
254.1665 410 l
254.6665 408.25 l
255.25 406.5835 l
255.9165 404.9165 l
256.5835 403.4165 l
257.4165 401.9165 l
258.25 400.5 l
259.0835 399.25 l
260 398.0835 l
260.9165 397.0835 l
261.9165 396.25 l
262.8335 395.5 l
263.833 395 l
264.75 394.583 l
265.6665 394.417 l
266.5835 394.333 l
267.4165 394.5 l
268.25 394.833 l
269 395.25 l
269.6665 395.9165 l
270.3335 396.75 l
270.8335 397.6665 l
271.3335 398.75 l
271.75 400 l
272 401.3335 l
272.25 402.75 l
272.333 404.3335 l
272.4165 405.9165 l
272.333 407.5835 l
272.1665 409.3335 l
271.9165 411.0835 l
271.583 412.8335 l
271.1665 414.5835 l
270.6665 416.3335 l
270.083 418 l
269.4165 419.6665 l
268.6665 421.25 l
267.9165 422.6665 l
267.083 424.0835 l
266.1665 425.3335 l
265.25 426.5 l
264.333 427.5 l
263.4165 428.3335 l
262.4165 429.0835 l
261.5 429.5835 l
260.583 430 l
259.583 430.1665 l
258.75 430.25 l
257.833 430.0835 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d250.5 436.9165 m
234.25 443.6665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M227.7295 446.375 m
238.4775 446.312 l
234.7373 443.4639 l
235.3589 438.8047 l
227.7295 446.375 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d239.25 451.5835 m
238.6665 451 l
238.1665 450.25 l
237.75 449.3335 l
237.5 448.4165 l
237.3335 447.3335 l
237.25 446.083 l
237.4165 444.833 l
237.6665 443.5 l
238 442.083 l
238.4165 440.583 l
239.0835 439.083 l
239.75 437.583 l
240.5835 436.083 l
241.5 434.5 l
242.4165 433 l
243.5 431.583 l
244.6665 430.1665 l
245.8335 428.833 l
247.0835 427.583 l
248.3335 426.4165 l
249.6665 425.333 l
250.9165 424.333 l
252.25 423.5 l
253.5 422.833 l
254.75 422.25 l
255.9165 421.833 l
257.0835 421.5 l
258.1665 421.4165 l
259.1665 421.4165 l
260.1665 421.583 l
261 421.833 l
261.75 422.333 l
262.3335 422.9165 l
262.8335 423.6665 l
263.25 424.5 l
263.5 425.5 l
263.6665 426.583 l
263.6665 427.75 l
263.5835 429 l
263.3335 430.4165 l
263 431.833 l
262.5 433.25 l
261.9165 434.75 l
261.25 436.25 l
260.4165 437.833 l
259.5 439.333 l
258.5835 440.833 l
257.5 442.333 l
256.3335 443.6665 l
255.1665 445 l
253.9165 446.333 l
252.6665 447.5 l
251.3335 448.583 l
250.0835 449.5 l
248.75 450.333 l
247.5 451.083 l
246.25 451.6665 l
245.0835 452.083 l
243.9165 452.333 l
242.8335 452.5 l
241.75 452.5 l
240.8335 452.333 l
240 452 l
239.25 451.583 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d229.8335 455.0835 m
212.25 455.0835 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M205.1895 455.0835 m
215.1392 459.1484 l
212.7778 455.0835 l
215.1392 451.019 l
205.1895 455.0835 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d213.9165 464.25 m
213.5 463.5 l
213.3335 462.5835 l
213.3335 461.6665 l
213.4165 460.6665 l
213.6665 459.5835 l
214.1665 458.5 l
214.75 457.3335 l
215.4165 456.1665 l
216.3335 455 l
217.3335 453.8335 l
218.4165 452.6665 l
219.6665 451.5 l
221 450.4165 l
222.4165 449.3335 l
223.9165 448.3335 l
225.4165 447.4165 l
227 446.5835 l
228.6665 445.75 l
230.25 445.0835 l
231.9165 444.5 l
233.5 444 l
235.0835 443.5835 l
236.5835 443.3335 l
238 443.1665 l
239.4165 443.0835 l
240.6665 443.1665 l
241.8335 443.3335 l
242.9165 443.5835 l
243.8335 444 l
244.6665 444.5 l
245.3335 445.1665 l
245.8335 445.8335 l
246.1665 446.5835 l
246.3335 447.5 l
246.4165 448.4165 l
246.25 449.4165 l
246 450.5 l
245.5835 451.5835 l
245 452.75 l
244.25 453.9165 l
243.3335 455.0835 l
242.3335 456.25 l
241.25 457.4165 l
240 458.5835 l
238.6665 459.6665 l
237.25 460.75 l
235.75 461.75 l
234.25 462.6665 l
232.6665 463.5 l
231.0835 464.3335 l
229.4165 465 l
227.8335 465.5835 l
226.1665 466.0835 l
224.6665 466.5 l
223.0835 466.75 l
221.6665 466.9165 l
220.3335 467 l
219 466.9165 l
217.8335 466.75 l
216.75 466.5 l
215.8335 466.0835 l
215.0835 465.5835 l
214.4165 465 l
213.9165 464.25 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d203.8335 463.8335 m
187.5835 457.1665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M181.0513 454.4863 m
188.7134 462.0239 l
188.0718 457.3667 l
191.7993 454.5029 l
181.0513 454.4863 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d185.5835 466.25 m
185.5 465.4165 l
185.6665 464.5 l
186 463.6665 l
186.5 462.75 l
187.1665 461.9165 l
188 461 l
189 460.1665 l
190.0835 459.4165 l
191.3335 458.6665 l
192.75 457.9165 l
194.25 457.3335 l
195.75 456.75 l
197.4165 456.25 l
199.1665 455.75 l
200.9165 455.4165 l
202.6665 455.1665 l
204.5 454.9165 l
206.25 454.8335 l
208.0835 454.8335 l
209.75 454.9165 l
211.4165 455.0835 l
213 455.25 l
214.5 455.5835 l
215.9165 456 l
217.25 456.5 l
218.4165 457 l
219.4165 457.6665 l
220.25 458.3335 l
221 459 l
221.5 459.8335 l
221.9165 460.5835 l
222.0835 461.5 l
222.1665 462.3335 l
222 463.25 l
221.6665 464.0835 l
221.1665 465 l
220.5 465.8335 l
219.6665 466.75 l
218.6665 467.5835 l
217.5835 468.3335 l
216.3335 469.0835 l
214.9165 469.75 l
213.5 470.4165 l
211.9165 471 l
210.25 471.5 l
208.5 472 l
206.75 472.3335 l
205 472.5835 l
203.1665 472.75 l
201.4165 472.917 l
199.6665 472.917 l
197.9165 472.8335 l
196.25 472.667 l
194.6665 472.5 l
193.1665 472.167 l
191.75 471.75 l
190.4165 471.25 l
189.25 470.75 l
188.25 470.0835 l
187.4165 469.4165 l
186.6665 468.6665 l
186.1665 467.9165 l
185.75 467.0835 l
185.5835 466.25 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d176.4165 462.0835 m
164 449.6665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M159.0073 444.6738 m
163.1685 454.584 l
164.373 450.0396 l
168.917 448.8354 l
159.0073 444.6738 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d158.6665 457.3335 m
158.9165 456.5 l
159.4165 455.75 l
160.0835 455.0835 l
160.8335 454.4165 l
161.8335 453.8335 l
162.9165 453.4165 l
164.0835 453 l
165.4165 452.6665 l
166.9165 452.5 l
168.4165 452.3335 l
170.0835 452.3335 l
171.75 452.4165 l
173.4165 452.5835 l
175.1665 452.833 l
176.9165 453.1665 l
178.6665 453.583 l
180.4165 454.0835 l
182.1665 454.6665 l
183.75 455.3335 l
185.3335 456.0835 l
186.8335 456.8335 l
188.25 457.6665 l
189.5 458.5 l
190.6665 459.4165 l
191.6665 460.333 l
192.5 461.333 l
193.1665 462.25 l
193.75 463.25 l
194.1665 464.1665 l
194.3335 465.083 l
194.3335 466 l
194.25 466.833 l
193.9165 467.6665 l
193.4165 468.4165 l
192.8335 469.083 l
192 469.75 l
191.0835 470.25 l
190 470.75 l
188.75 471.1665 l
187.4165 471.5 l
186 471.6665 l
184.4165 471.8335 l
182.8335 471.8335 l
181.1665 471.75 l
179.4165 471.5835 l
177.6665 471.3335 l
175.9165 471 l
174.1665 470.5835 l
172.4165 470.0835 l
170.75 469.5 l
169.0835 468.8335 l
167.5 468.0835 l
166 467.3335 l
164.6665 466.5 l
163.4165 465.5835 l
162.25 464.75 l
161.25 463.75 l
160.3335 462.8335 l
159.6665 461.9165 l
159.0835 460.9165 l
158.75 460 l
158.5 459.0835 l
158.5 458.1665 l
158.6665 457.3335 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d151.8335 449.9165 m
145.0835 433.6665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M142.375 427.146 m
142.438 437.894 l
145.2861 434.1538 l
149.9453 434.7754 l
142.375 427.146 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d137.1665 438.75 m
137.75 438.0835 l
138.5 437.5835 l
139.3335 437.1665 l
140.3335 436.9165 l
141.4165 436.75 l
142.5835 436.75 l
143.9165 436.8335 l
145.25 437.083 l
146.6665 437.4165 l
148.1665 437.9165 l
149.6665 438.5 l
151.1665 439.1665 l
152.6665 440 l
154.1665 440.9165 l
155.6665 441.9165 l
157.1665 442.9165 l
158.5835 444.083 l
159.9165 445.25 l
161.1665 446.5 l
162.3335 447.75 l
163.4165 449.083 l
164.3335 450.3335 l
165.25 451.6665 l
165.9165 452.9165 l
166.5 454.1665 l
166.9165 455.4165 l
167.25 456.5 l
167.3335 457.5835 l
167.3335 458.6665 l
167.1665 459.5835 l
166.8335 460.4165 l
166.4165 461.1665 l
165.8335 461.75 l
165.0835 462.3335 l
164.25 462.6665 l
163.25 463 l
162.1665 463.0835 l
161 463.1665 l
159.6665 463 l
158.3335 462.8335 l
156.9165 462.4165 l
155.5 462 l
154 461.3335 l
152.4165 460.6665 l
150.9165 459.8335 l
149.4165 459 l
147.9165 458 l
146.4165 456.9165 l
145 455.75 l
143.6665 454.5835 l
142.4165 453.3335 l
141.25 452.0835 l
140.1665 450.8335 l
139.25 449.5 l
138.4165 448.25 l
137.6665 446.9165 l
137.0835 445.6665 l
136.6665 444.5 l
136.4165 443.3335 l
136.25 442.25 l
136.25 441.25 l
136.4165 440.25 l
136.75 439.4165 l
137.1665 438.75 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d133.6665 429.25 m
133.6665 411.6665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M133.6665 404.606 m
129.6016 414.5557 l
133.6665 412.1943 l
137.731 414.5557 l
133.6665 404.606 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d124.5 413.3335 m
125.25 413 l
126.1665 412.75 l
127.0835 412.75 l
128.0835 412.8335 l
129.1665 413.1665 l
130.25 413.5835 l
131.4165 414.1665 l
132.5835 414.9165 l
133.75 415.75 l
134.9165 416.75 l
136.0835 417.9165 l
137.1665 419.083 l
138.3335 420.4165 l
139.3335 421.833 l
140.3335 423.333 l
141.3335 424.9165 l
142.1665 426.5 l
143 428.083 l
143.6665 429.6665 l
144.25 431.333 l
144.75 432.9165 l
145.1665 434.5 l
145.4165 436 l
145.5835 437.4165 l
145.6665 438.833 l
145.5835 440.083 l
145.4165 441.25 l
145.0835 442.333 l
144.75 443.25 l
144.25 444.083 l
143.5835 444.75 l
142.9165 445.25 l
142.0835 445.583 l
141.25 445.75 l
140.3335 445.833 l
139.25 445.6665 l
138.25 445.4165 l
137.0835 445 l
136 444.4165 l
134.8335 443.6665 l
133.6665 442.833 l
132.5 441.833 l
131.3335 440.6665 l
130.1665 439.4165 l
129.0835 438.083 l
128 436.6665 l
127 435.25 l
126.0835 433.6665 l
125.1665 432.083 l
124.4165 430.5 l
123.75 428.833 l
123.0835 427.25 l
122.5835 425.6665 l
122.25 424.0835 l
121.9165 422.5835 l
121.75 421.0835 l
121.75 419.75 l
121.8335 418.4165 l
122 417.25 l
122.25 416.25 l
122.6665 415.25 l
123.1665 414.5 l
123.75 413.8335 l
124.5 413.3335 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d124.8335 403.25 m
131.5835 387 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M134.292 380.4795 m
126.7212 388.1084 l
131.3809 387.4873 l
134.2285 391.2275 l
134.292 380.4795 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d122.4165 385 m
123.3335 385 l
124.1665 385.167 l
125.0835 385.417 l
126 385.917 l
126.8335 386.583 l
127.6665 387.417 l
128.5 388.417 l
129.3335 389.5 l
130.0835 390.833 l
130.75 392.167 l
131.4165 393.667 l
132 395.25 l
132.5 396.833 l
132.9165 398.583 l
133.3335 400.333 l
133.5835 402.083 l
133.75 403.9165 l
133.9165 405.75 l
133.9165 407.5 l
133.8335 409.1665 l
133.6665 410.833 l
133.4165 412.5 l
133.1665 414 l
132.75 415.4165 l
132.25 416.6665 l
131.6665 417.833 l
131.0835 418.833 l
130.4165 419.75 l
129.6665 420.4165 l
128.9165 421 l
128.0835 421.333 l
127.25 421.583 l
126.4165 421.583 l
125.5 421.4165 l
124.6665 421.083 l
123.75 420.583 l
122.8335 419.9165 l
122 419.083 l
121.1665 418.083 l
120.4165 417 l
119.6665 415.75 l
118.9165 414.4165 l
118.3335 412.9165 l
117.75 411.333 l
117.25 409.6665 l
116.75 408 l
116.4165 406.1665 l
116.1665 404.4165 l
115.9165 402.583 l
115.8335 400.833 l
115.8335 399.083 l
115.9165 397.333 l
116 395.6665 l
116.25 394.083 l
116.5835 392.583 l
117 391.167 l
117.5 389.917 l
118 388.75 l
118.6665 387.667 l
119.3335 386.833 l
120 386.083 l
120.8335 385.583 l
121.5835 385.167 l
122.4165 385 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d126.6665 375.833 m
139.0835 363.417 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M144.0762 358.4248 m
134.166 362.585 l
138.7104 363.79 l
139.9146 368.334 l
144.0762 358.4248 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d131.4165 358.083 m
132.25 358.333 l
133 358.833 l
133.6665 359.5 l
134.3335 360.25 l
134.8335 361.25 l
135.3335 362.333 l
135.75 363.583 l
136 364.917 l
136.25 366.333 l
136.3335 367.833 l
136.4165 369.5 l
136.3335 371.167 l
136.1665 372.917 l
135.9165 374.667 l
135.5835 376.417 l
135.1665 378.167 l
134.6665 379.917 l
134.0835 381.583 l
133.4165 383.25 l
132.6665 384.75 l
131.9165 386.25 l
131.0835 387.667 l
130.1665 388.917 l
129.3335 390.083 l
128.3335 391.083 l
127.4165 391.917 l
126.4165 392.667 l
125.5 393.167 l
124.5835 393.583 l
123.6665 393.75 l
122.75 393.833 l
121.9165 393.667 l
121.0835 393.333 l
120.3335 392.917 l
119.5835 392.25 l
119 391.417 l
118.4165 390.5 l
118 389.417 l
117.5835 388.167 l
117.25 386.833 l
117.0835 385.417 l
116.9165 383.833 l
116.9165 382.25 l
117 380.583 l
117.1665 378.833 l
117.4165 377.083 l
117.75 375.333 l
118.1665 373.583 l
118.6665 371.833 l
119.25 370.167 l
119.9165 368.5 l
120.6665 366.917 l
121.4165 365.5 l
122.25 364.083 l
123.0835 362.833 l
124 361.667 l
124.9165 360.667 l
125.9165 359.833 l
126.8335 359.083 l
127.8335 358.583 l
128.75 358.167 l
129.6665 358 l
130.5835 357.917 l
131.4165 358.083 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d138.8335 351.25 m
155.0835 344.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M161.604 341.791 m
150.856 341.8545 l
154.5962 344.7021 l
153.9746 349.3613 l
161.604 341.791 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d150 336.583 m
150.6665 337.167 l
151.1665 337.917 l
151.5835 338.833 l
151.8335 339.75 l
152 340.833 l
152 342.083 l
151.9165 343.333 l
151.6665 344.667 l
151.3335 346.083 l
150.8335 347.583 l
150.25 349.083 l
149.5835 350.583 l
148.75 352.083 l
147.8335 353.667 l
146.8335 355.167 l
145.75 356.583 l
144.6665 358 l
143.5 359.333 l
142.25 360.583 l
141 361.75 l
139.6665 362.833 l
138.3335 363.833 l
137.0835 364.667 l
135.8335 365.333 l
134.5835 365.917 l
133.3335 366.333 l
132.1665 366.667 l
131.0835 366.75 l
130.0835 366.75 l
129.1665 366.583 l
128.3335 366.333 l
127.5835 365.833 l
126.9165 365.25 l
126.4165 364.5 l
126 363.667 l
125.75 362.667 l
125.5835 361.583 l
125.5835 360.417 l
125.6665 359.167 l
125.9165 357.75 l
126.25 356.333 l
126.75 354.917 l
127.3335 353.417 l
128.0835 351.917 l
128.8335 350.333 l
129.75 348.833 l
130.75 347.333 l
131.8335 345.833 l
132.9165 344.5 l
134.1665 343.167 l
135.4165 341.833 l
136.6665 340.667 l
137.9165 339.583 l
139.25 338.667 l
140.5 337.833 l
141.8335 337.083 l
143.0835 336.5 l
144.25 336.083 l
145.4165 335.833 l
146.5 335.667 l
147.5 335.667 l
148.4165 335.833 l
149.25 336.167 l
150 336.583 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d159.4165 333.083 m
177.0835 333.083 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M184.144 333.083 m
174.1943 329.0176 l
176.5557 333.083 l
174.1943 337.1475 l
184.144 333.083 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d175.4165 323.917 m
175.75 324.667 l
176 325.583 l
176 326.5 l
175.9165 327.5 l
175.5835 328.583 l
175.1665 329.667 l
174.5835 330.833 l
173.8335 332 l
173 333.167 l
172 334.333 l
170.8335 335.5 l
169.5835 336.667 l
168.3335 337.75 l
166.9165 338.833 l
165.4165 339.833 l
163.8335 340.75 l
162.25 341.583 l
160.6665 342.417 l
159 343.083 l
157.4165 343.667 l
155.8335 344.167 l
154.25 344.583 l
152.75 344.833 l
151.25 345 l
149.9165 345.083 l
148.6665 345 l
147.4165 344.833 l
146.4165 344.583 l
145.4165 344.167 l
144.6665 343.667 l
144 343 l
143.5 342.333 l
143.1665 341.583 l
142.9165 340.667 l
142.9165 339.75 l
143 338.75 l
143.3335 337.667 l
143.75 336.583 l
144.3335 335.417 l
145.0835 334.25 l
145.9165 333.083 l
146.9165 331.917 l
148.0835 330.75 l
149.25 329.583 l
150.5835 328.5 l
152 327.417 l
153.5 326.417 l
155.0835 325.5 l
156.6665 324.667 l
158.25 323.833 l
159.9165 323.167 l
161.5 322.583 l
163.0835 322.083 l
164.6665 321.667 l
166.1665 321.417 l
167.6665 321.25 l
169 321.167 l
170.25 321.25 l
171.4165 321.417 l
172.5 321.667 l
173.4165 322.083 l
174.25 322.583 l
174.9165 323.167 l
175.4165 323.917 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d185.5 324.333 m
201.75 331 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M208.2822 333.6797 m
200.6201 326.1426 l
201.2617 330.7998 l
197.5342 333.6641 l
208.2822 333.6797 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d203.75 321.917 m
203.75 322.75 l
203.5835 323.667 l
203.25 324.5 l
202.75 325.417 l
202.0835 326.25 l
201.25 327.167 l
200.3335 328 l
199.1665 328.75 l
197.9165 329.5 l
196.5835 330.25 l
195.0835 330.833 l
193.5 331.417 l
191.8335 331.917 l
190.1665 332.417 l
188.4165 332.75 l
186.5835 333 l
184.8335 333.25 l
183 333.333 l
181.25 333.333 l
179.5 333.25 l
177.8335 333.083 l
176.25 332.917 l
174.75 332.583 l
173.3335 332.167 l
172.0835 331.667 l
170.9165 331.167 l
169.9165 330.5 l
169 329.833 l
168.3335 329.167 l
167.75 328.333 l
167.4165 327.583 l
167.1665 326.667 l
167.1665 325.833 l
167.3335 324.917 l
167.6665 324.083 l
168.1665 323.167 l
168.8335 322.333 l
169.6665 321.417 l
170.5835 320.583 l
171.75 319.833 l
173 319.083 l
174.3335 318.417 l
175.8335 317.75 l
177.4165 317.167 l
179.0835 316.667 l
180.75 316.167 l
182.5 315.833 l
184.3335 315.583 l
186.0835 315.417 l
187.9165 315.25 l
189.6665 315.25 l
191.4165 315.333 l
193.0835 315.5 l
194.6665 315.667 l
196.1665 316 l
197.5835 316.417 l
198.8335 316.917 l
200 317.417 l
201 318.083 l
201.9165 318.75 l
202.5835 319.5 l
203.1665 320.25 l
203.5 321.083 l
203.75 321.917 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d212.8335 326.083 m
225.3335 338.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M230.3428 343.4756 m
226.1484 333.5801 l
224.959 338.1279 l
220.4194 339.3477 l
230.3428 343.4756 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d230.6665 330.833 m
230.3335 331.667 l
229.9165 332.417 l
229.25 333.083 l
228.4165 333.75 l
227.5 334.333 l
226.4165 334.75 l
225.1665 335.167 l
223.8335 335.5 l
222.4165 335.667 l
220.8335 335.833 l
219.25 335.833 l
217.5835 335.75 l
215.8335 335.583 l
214.0835 335.333 l
212.3335 335 l
210.5835 334.583 l
208.8335 334.083 l
207.1665 333.5 l
205.5 332.833 l
203.9165 332.083 l
202.5 331.333 l
201.0835 330.5 l
199.8335 329.667 l
198.6665 328.75 l
197.6665 327.833 l
196.8335 326.833 l
196.0835 325.917 l
195.5835 324.917 l
195.1665 324 l
195 323.083 l
194.9165 322.167 l
195.0835 321.333 l
195.4165 320.5 l
195.8335 319.75 l
196.5 319.083 l
197.3335 318.417 l
198.25 317.917 l
199.3335 317.417 l
200.5835 317 l
201.9165 316.667 l
203.3335 316.5 l
204.8335 316.333 l
206.5 316.333 l
208.1665 316.417 l
209.9165 316.583 l
211.6665 316.833 l
213.4165 317.167 l
215.1665 317.583 l
216.9165 318.083 l
218.5835 318.667 l
220.25 319.333 l
221.75 320.083 l
223.25 320.833 l
224.6665 321.667 l
225.9165 322.583 l
227.0835 323.417 l
228.0835 324.417 l
228.9165 325.333 l
229.6665 326.25 l
230.1665 327.25 l
230.5835 328.167 l
230.75 329.083 l
230.8335 330 l
230.6665 330.833 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d237.5 338.25 m
244.25 354.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M246.9585 361.0205 m
246.8955 350.2725 l
244.0474 354.0127 l
239.3882 353.3906 l
246.9585 361.0205 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d252.0835 349.417 m
251.5 350.083 l
250.8335 350.583 l
249.9165 351 l
249 351.25 l
247.8335 351.417 l
246.6665 351.417 l
245.4165 351.333 l
244.0835 351.083 l
242.6665 350.75 l
241.1665 350.25 l
239.6665 349.667 l
238.1665 349 l
236.5835 348.167 l
235.0835 347.25 l
233.5835 346.25 l
232.1665 345.25 l
230.75 344.083 l
229.4165 342.917 l
228.1665 341.667 l
226.9165 340.417 l
225.9165 339.083 l
224.9165 337.833 l
224.0835 336.5 l
223.4165 335.25 l
222.8335 334 l
222.3335 332.75 l
222.0835 331.667 l
221.9165 330.583 l
221.9165 329.5 l
222.0835 328.583 l
222.4165 327.75 l
222.9165 327 l
223.5 326.417 l
224.1665 325.833 l
225.0835 325.5 l
226.0835 325.167 l
227.1665 325.083 l
228.3335 325 l
229.5835 325.167 l
230.9165 325.333 l
232.3335 325.75 l
233.8335 326.167 l
235.3335 326.833 l
236.8335 327.5 l
238.4165 328.333 l
239.9165 329.167 l
241.4165 330.167 l
242.8335 331.25 l
244.25 332.417 l
245.5835 333.583 l
246.8335 334.833 l
248.0835 336.083 l
249.0835 337.333 l
250.0835 338.667 l
250.9165 339.917 l
251.6665 341.25 l
252.1665 342.5 l
252.6665 343.667 l
252.9165 344.833 l
253.0835 345.917 l
253.0835 346.917 l
252.9165 347.917 l
252.5835 348.75 l
252.0835 349.417 l
S/BBAccumRotation (0.000000) XT
q0 j 1 w 4 M []0 d350.583 414.1665 m
350.583 373.917 l
390.833 373.917 l
390.833 414.1665 l
350.583 414.1665 l
hWn/BBAccumRotation (0.000000) XT
0 O
0.15 1 1 0 k
0 R
0 0 0 1 K
1 j 10 M380.6797 394.0801 m
380.6797 388.5596 376.2002 384.0801 370.6797 384.0801 c
365.1602 384.0801 360.6797 388.5596 360.6797 394.0801 c
360.6797 399.6001 365.1602 404.0801 370.6797 404.0801 c
376.2002 404.0801 380.6797 399.6001 380.6797 394.0801 c
B/BBAccumRotation (0.000000) XT
Q/BBAccumRotation (0.000000) XT
0 A
u0 R
0 G
300 Ar
0 J 1 j 1 w 10 M []0 d%AI3_Note:0 D
0 XR
258.5 357.667 m
258.5 375.25 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M258.5 382.3105 m
262.5649 372.3613 l
258.5 374.7227 l
254.4355 372.3613 l
258.5 382.3105 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d268 328.25 m
268.8335 328.667 l
269.5 329.417 l
270.0835 330.333 l
270.5 331.583 l
270.8335 333 l
271.0835 334.75 l
271.1665 336.667 l
271.1665 338.833 l
271 341.167 l
270.75 343.583 l
270.3335 346.167 l
269.9165 348.917 l
269.25 351.75 l
268.5835 354.583 l
267.75 357.5 l
266.8335 360.333 l
265.9165 363.25 l
264.8335 366.083 l
263.75 368.75 l
262.5835 371.417 l
261.4165 373.917 l
260.1665 376.25 l
258.9165 378.333 l
257.6665 380.333 l
256.4165 382.083 l
255.25 383.583 l
254 384.833 l
252.9165 385.833 l
251.833 386.5 l
250.75 387 l
249.833 387.167 l
248.9165 387 l
248.1665 386.583 l
247.5 385.917 l
246.9165 384.917 l
246.5 383.75 l
246.1665 382.25 l
245.9165 380.583 l
245.833 378.583 l
245.833 376.5 l
246 374.167 l
246.25 371.667 l
246.583 369.083 l
247.083 366.333 l
247.75 363.583 l
248.4165 360.75 l
249.25 357.833 l
250.1665 354.917 l
251.0835 352.083 l
252.1665 349.25 l
253.25 346.5 l
254.4165 343.917 l
255.5835 341.417 l
256.8335 339.083 l
258.0835 336.917 l
259.3335 335 l
260.5835 333.25 l
261.75 331.75 l
263 330.5 l
264.0835 329.5 l
265.1665 328.75 l
266.25 328.333 l
267.1665 328.167 l
268 328.25 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d281 317.5 m
274.25 333.75 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M271.5415 340.2705 m
279.1123 332.6416 l
274.4526 333.2627 l
271.605 329.5225 l
271.5415 340.2705 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d301 294 m
301.5835 294.75 l
301.9165 295.583 l
302.0835 296.667 l
302.0835 298 l
301.8335 299.5 l
301.3335 301.167 l
300.75 303 l
299.9165 304.917 l
298.8335 307 l
297.6665 309.25 l
296.3335 311.5 l
294.8335 313.833 l
293.1665 316.167 l
291.4165 318.5 l
289.5835 320.917 l
287.6665 323.25 l
285.6665 325.5 l
283.5835 327.667 l
281.5835 329.75 l
279.5 331.75 l
277.4165 333.583 l
275.4165 335.333 l
273.4165 336.833 l
271.5 338.167 l
269.75 339.25 l
268 340.167 l
266.4165 340.917 l
265 341.417 l
263.75 341.667 l
262.5835 341.667 l
261.6665 341.417 l
260.9165 341 l
260.3335 340.333 l
260 339.417 l
259.8335 338.333 l
259.9165 337 l
260.1665 335.5 l
260.5835 333.833 l
261.25 332 l
262.0835 330.083 l
263.0835 328 l
264.25 325.833 l
265.5835 323.5 l
267.0835 321.25 l
268.75 318.833 l
270.5 316.5 l
272.3335 314.083 l
274.25 311.833 l
276.25 309.5 l
278.3335 307.333 l
280.4165 305.25 l
282.5 303.25 l
284.5 301.417 l
286.5835 299.75 l
288.5 298.167 l
290.4165 296.833 l
292.25 295.75 l
293.9165 294.833 l
295.5 294.083 l
296.9165 293.667 l
298.25 293.417 l
299.3335 293.333 l
300.25 293.583 l
301 294 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d317.083 289 m
304.6665 301.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M299.6909 306.5098 m
309.5869 302.3145 l
305.0386 301.126 l
303.8188 296.5859 l
299.6909 306.5098 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d344.583 275 m
344.833 275.833 l
344.833 276.833 l
344.583 277.917 l
344 279.083 l
343.25 280.333 l
342.167 281.75 l
340.917 283.167 l
339.333 284.667 l
337.667 286.167 l
335.667 287.75 l
333.583 289.333 l
331.333 290.917 l
328.917 292.5 l
326.417 294 l
323.75 295.417 l
321.083 296.833 l
318.417 298.167 l
315.667 299.417 l
312.917 300.583 l
310.25 301.667 l
307.667 302.583 l
305.1665 303.333 l
302.75 304 l
300.5 304.5 l
298.3335 304.833 l
296.4165 305 l
294.75 305.083 l
293.25 305 l
291.9165 304.75 l
290.9165 304.333 l
290.0835 303.75 l
289.5835 303 l
289.3335 302.167 l
289.3335 301.25 l
289.5835 300.167 l
290.1665 299 l
291 297.667 l
292 296.333 l
293.3335 294.917 l
294.8335 293.417 l
296.5835 291.833 l
298.5 290.333 l
300.583 288.75 l
302.9165 287.167 l
305.333 285.583 l
307.833 284.083 l
310.417 282.583 l
313.083 281.167 l
315.833 279.833 l
318.583 278.583 l
321.25 277.417 l
323.917 276.417 l
326.583 275.5 l
329.083 274.75 l
331.5 274.083 l
333.75 273.583 l
335.833 273.25 l
337.75 273 l
339.5 273 l
341 273.083 l
342.25 273.333 l
343.333 273.75 l
344.083 274.333 l
344.583 275 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d361.417 276.5 m
345.083 283.25 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M338.5576 285.9463 m
349.3057 285.9033 l
345.5703 283.0488 l
346.2012 278.3906 l
338.5576 285.9463 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d392.167 274.083 m
392.083 275 l
391.667 275.917 l
391 276.75 l
390.083 277.667 l
388.833 278.5 l
387.333 279.417 l
385.583 280.25 l
383.667 281 l
381.417 281.75 l
379.083 282.5 l
376.5 283.167 l
373.833 283.75 l
371 284.25 l
368.083 284.667 l
365.083 285 l
362.083 285.333 l
359.083 285.5 l
356.083 285.583 l
353.083 285.667 l
350.25 285.583 l
347.5 285.417 l
344.833 285.167 l
342.417 284.833 l
340.083 284.417 l
338 284 l
336.167 283.417 l
334.583 282.833 l
333.25 282.167 l
332.167 281.417 l
331.333 280.667 l
330.833 279.833 l
330.583 279 l
330.667 278.083 l
331.083 277.167 l
331.75 276.333 l
332.667 275.417 l
333.917 274.5 l
335.417 273.667 l
337.167 272.833 l
339.167 272.083 l
341.333 271.333 l
343.75 270.583 l
346.25 269.917 l
349 269.333 l
351.75 268.833 l
354.667 268.417 l
357.667 268.083 l
360.667 267.75 l
363.667 267.583 l
366.667 267.5 l
369.667 267.417 l
372.5 267.5 l
375.25 267.667 l
377.917 267.917 l
380.333 268.25 l
382.667 268.583 l
384.75 269.083 l
386.583 269.667 l
388.167 270.25 l
389.583 270.917 l
390.667 271.667 l
391.417 272.417 l
391.917 273.25 l
392.167 274.083 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d407.083 281.917 m
389.5 281.917 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M382.4395 281.917 m
392.3887 285.9814 l
390.0273 281.917 l
392.3887 277.8525 l
382.4395 281.917 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d436.417 291.5 m
436 292.25 l
435.333 292.917 l
434.333 293.5 l
433.167 294 l
431.667 294.333 l
430 294.5 l
428 294.667 l
425.917 294.583 l
423.583 294.5 l
421.083 294.167 l
418.5 293.833 l
415.75 293.333 l
413 292.75 l
410.167 292 l
407.25 291.25 l
404.333 290.333 l
401.5 289.333 l
398.667 288.333 l
395.917 287.167 l
393.333 286 l
390.833 284.833 l
388.5 283.583 l
386.333 282.333 l
384.417 281.083 l
382.667 279.917 l
381.167 278.667 l
379.917 277.5 l
378.917 276.333 l
378.167 275.25 l
377.75 274.25 l
377.583 273.25 l
377.667 272.417 l
378.083 271.667 l
378.833 271 l
379.75 270.417 l
381 269.917 l
382.417 269.583 l
384.167 269.333 l
386.083 269.25 l
388.25 269.25 l
390.583 269.417 l
393 269.667 l
395.583 270.083 l
398.333 270.583 l
401.167 271.167 l
404 271.917 l
406.917 272.667 l
409.75 273.583 l
412.667 274.583 l
415.5 275.583 l
418.167 276.667 l
420.833 277.833 l
423.333 279.083 l
425.667 280.25 l
427.75 281.5 l
429.75 282.75 l
431.5 284 l
433 285.25 l
434.25 286.417 l
435.25 287.583 l
435.917 288.667 l
436.417 289.667 l
436.583 290.583 l
436.417 291.5 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d447.167 304.417 m
430.917 297.667 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M424.3965 294.959 m
432.0254 302.5293 l
431.4043 297.8691 l
435.1445 295.0215 l
424.3965 294.959 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d470.667 324.5 m
470 325 l
469.083 325.417 l
468 325.583 l
466.667 325.5 l
465.25 325.25 l
463.583 324.833 l
461.75 324.167 l
459.75 323.333 l
457.667 322.333 l
455.5 321.167 l
453.25 319.75 l
450.917 318.25 l
448.583 316.667 l
446.167 314.917 l
443.833 313.083 l
441.5 311.083 l
439.25 309.083 l
437 307.083 l
434.917 305 l
432.917 302.917 l
431.083 300.917 l
429.417 298.833 l
427.917 296.917 l
426.583 295 l
425.417 293.167 l
424.5 291.5 l
423.833 289.917 l
423.333 288.5 l
423.083 287.167 l
423.083 286.083 l
423.25 285.167 l
423.75 284.417 l
424.417 283.833 l
425.333 283.5 l
426.417 283.333 l
427.667 283.333 l
429.167 283.583 l
430.833 284 l
432.667 284.667 l
434.667 285.5 l
436.75 286.5 l
438.917 287.75 l
441.167 289.083 l
443.5 290.583 l
445.833 292.167 l
448.25 293.917 l
450.583 295.833 l
452.917 297.75 l
455.167 299.75 l
457.417 301.75 l
459.5 303.833 l
461.5 305.917 l
463.333 308 l
465 310 l
466.5 312 l
467.833 313.833 l
469 315.667 l
469.917 317.417 l
470.583 318.917 l
471.083 320.417 l
471.333 321.667 l
471.333 322.75 l
471.083 323.75 l
470.667 324.5 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d475.667 340.583 m
463.25 328.083 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M458.2744 323.0742 m
462.4023 332.9971 l
463.6221 328.457 l
468.1699 327.2686 l
458.2744 323.0742 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d489.667 368.083 m
488.833 368.333 l
487.917 368.333 l
486.833 368 l
485.667 367.5 l
484.333 366.667 l
483 365.667 l
481.583 364.333 l
480.083 362.833 l
478.5 361.083 l
476.917 359.167 l
475.417 357.083 l
473.833 354.75 l
472.25 352.333 l
470.75 349.833 l
469.25 347.25 l
467.833 344.583 l
466.5 341.833 l
465.25 339.083 l
464.083 336.417 l
463.083 333.75 l
462.167 331.083 l
461.417 328.583 l
460.75 326.167 l
460.25 323.917 l
459.917 321.833 l
459.667 319.917 l
459.667 318.167 l
459.75 316.667 l
460 315.417 l
460.417 314.333 l
461 313.583 l
461.667 313.083 l
462.5 312.833 l
463.5 312.833 l
464.583 313.083 l
465.75 313.583 l
467 314.417 l
468.417 315.5 l
469.833 316.75 l
471.333 318.25 l
472.833 320 l
474.417 321.917 l
476 324.083 l
477.583 326.333 l
479.083 328.75 l
480.667 331.25 l
482.083 333.917 l
483.5 336.583 l
484.833 339.25 l
486.083 342 l
487.25 344.75 l
488.333 347.417 l
489.167 350 l
490 352.5 l
490.667 354.917 l
491.167 357.167 l
491.5 359.25 l
491.667 361.167 l
491.75 362.917 l
491.667 364.417 l
491.333 365.75 l
491 366.75 l
490.417 367.5 l
489.667 368.083 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d488.167 384.833 m
481.417 368.583 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M478.709 362.0625 m
478.7715 372.8105 l
481.6191 369.0703 l
486.2793 369.6924 l
478.709 362.0625 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d490.583 415.5835 m
489.75 415.5 l
488.833 415.1665 l
487.917 414.5 l
487.083 413.5 l
486.167 412.3335 l
485.333 410.8335 l
484.5 409.0835 l
483.667 407.0835 l
482.917 404.9165 l
482.25 402.5 l
481.583 399.9165 l
481 397.25 l
480.5 394.417 l
480.083 391.5 l
479.667 388.5 l
479.417 385.5 l
479.167 382.5 l
479.083 379.5 l
479.083 376.583 l
479.167 373.667 l
479.333 370.917 l
479.5 368.333 l
479.833 365.833 l
480.25 363.583 l
480.75 361.5 l
481.25 359.667 l
481.917 358 l
482.583 356.667 l
483.333 355.583 l
484.083 354.75 l
484.917 354.25 l
485.75 354.083 l
486.583 354.167 l
487.5 354.5 l
488.417 355.167 l
489.333 356.167 l
490.167 357.333 l
491 358.833 l
491.833 360.583 l
492.667 362.583 l
493.417 364.75 l
494.083 367.167 l
494.75 369.75 l
495.333 372.417 l
495.833 375.25 l
496.333 378.167 l
496.667 381.167 l
496.917 384.167 l
497.167 387.167 l
497.25 390.167 l
497.25 393.083 l
497.167 396 l
497.083 398.75 l
496.833 401.3335 l
496.5 403.8335 l
496.083 406.0835 l
495.583 408.1665 l
495.083 410 l
494.417 411.6665 l
493.75 413 l
493 414.0835 l
492.25 414.9165 l
491.417 415.4165 l
490.583 415.5835 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d482.75 430.5 m
482.75 412.9165 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M482.75 405.856 m
478.6855 415.8057 l
482.75 413.4443 l
486.8145 415.8057 l
482.75 405.856 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d473.25 459.9165 m
472.417 459.5 l
471.75 458.75 l
471.25 457.8335 l
470.75 456.5835 l
470.417 455.1665 l
470.167 453.4165 l
470.083 451.5 l
470.083 449.3335 l
470.25 447 l
470.5 444.5835 l
470.917 442 l
471.417 439.25 l
472 436.4165 l
472.667 433.5835 l
473.5 430.6665 l
474.417 427.8335 l
475.333 424.9165 l
476.417 422.083 l
477.5 419.4165 l
478.667 416.75 l
479.917 414.25 l
481.083 411.9165 l
482.333 409.8335 l
483.583 407.8335 l
484.833 406.0835 l
486.083 404.5835 l
487.25 403.3335 l
488.417 402.3335 l
489.5 401.6665 l
490.5 401.1665 l
491.417 401 l
492.333 401.1665 l
493.083 401.5835 l
493.75 402.25 l
494.333 403.25 l
494.75 404.4165 l
495.083 405.9165 l
495.333 407.5835 l
495.417 409.5835 l
495.417 411.6665 l
495.25 414 l
495 416.5 l
494.667 419.083 l
494.167 421.8335 l
493.583 424.5835 l
492.833 427.4165 l
492 430.3335 l
491.167 433.25 l
490.167 436.0835 l
489.083 438.9165 l
488 441.6665 l
486.833 444.25 l
485.667 446.75 l
484.417 449.0835 l
483.167 451.25 l
481.917 453.1665 l
480.667 454.9165 l
479.5 456.4165 l
478.333 457.6665 l
477.167 458.6665 l
476.083 459.4165 l
475.083 459.8335 l
474.083 460 l
473.25 459.9165 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d460.25 470.6665 m
467 454.4165 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M469.708 447.896 m
462.1377 455.5254 l
466.7979 454.9038 l
469.6455 458.6436 l
469.708 447.896 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d440.25 494.1665 m
439.667 493.4165 l
439.333 492.5835 l
439.167 491.5 l
439.167 490.1665 l
439.417 488.6665 l
439.917 487 l
440.583 485.1665 l
441.417 483.25 l
442.417 481.1665 l
443.583 478.9165 l
444.917 476.6665 l
446.417 474.3335 l
448.083 472 l
449.833 469.6665 l
451.667 467.25 l
453.583 464.9165 l
455.583 462.6665 l
457.667 460.5 l
459.667 458.4165 l
461.75 456.4165 l
463.833 454.5835 l
465.833 452.8335 l
467.833 451.3335 l
469.75 450 l
471.5 448.9165 l
473.25 448 l
474.833 447.25 l
476.25 446.75 l
477.5 446.5 l
478.667 446.5 l
479.583 446.75 l
480.333 447.1665 l
480.917 447.8335 l
481.25 448.75 l
481.417 449.8335 l
481.333 451.1665 l
481.083 452.6665 l
480.667 454.3335 l
480 456.1665 l
479.167 458.0835 l
478.167 460.1665 l
477 462.3335 l
475.667 464.6665 l
474.167 466.9165 l
472.5 469.3335 l
470.75 471.6665 l
468.917 474.0835 l
467 476.3335 l
465 478.6665 l
462.917 480.8335 l
460.833 482.9165 l
458.833 484.9165 l
456.75 486.75 l
454.75 488.4165 l
452.75 490 l
450.833 491.3335 l
449 492.4165 l
447.333 493.3335 l
445.75 494.0835 l
444.333 494.5 l
443.083 494.75 l
441.917 494.8335 l
441 494.5835 l
440.25 494.1665 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d424.167 499.1665 m
436.583 486.6665 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M441.5586 481.6572 m
431.6631 485.8516 l
436.2109 487.041 l
437.4307 491.5806 l
441.5586 481.6572 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d396.667 513.1665 m
396.417 512.3335 l
396.417 511.3335 l
396.667 510.25 l
397.25 509.0835 l
398 507.8335 l
399.083 506.4165 l
400.333 505 l
401.917 503.5 l
403.583 502 l
405.583 500.4165 l
407.667 498.8335 l
409.917 497.25 l
412.333 495.6665 l
414.833 494.1665 l
417.5 492.75 l
420.167 491.3335 l
422.917 490 l
425.583 488.75 l
428.333 487.5835 l
431 486.5 l
433.583 485.5835 l
436.083 484.8335 l
438.5 484.1665 l
440.75 483.6665 l
442.917 483.3335 l
444.833 483.1665 l
446.5 483.0835 l
448 483.1665 l
449.333 483.4165 l
450.333 483.833 l
451.167 484.4165 l
451.667 485.1665 l
451.917 486 l
451.917 486.9165 l
451.667 488 l
451.083 489.1665 l
450.333 490.5 l
449.25 491.833 l
447.917 493.25 l
446.417 494.75 l
444.667 496.333 l
442.75 497.833 l
440.667 499.4165 l
438.333 501 l
436 502.583 l
433.417 504.083 l
430.833 505.583 l
428.167 507 l
425.417 508.333 l
422.75 509.583 l
420 510.75 l
417.333 511.75 l
414.75 512.6665 l
412.167 513.4165 l
409.833 514.083 l
407.5 514.583 l
405.417 514.9165 l
403.5 515.1665 l
401.75 515.1665 l
400.25 515.083 l
399 514.833 l
398 514.4165 l
397.167 513.833 l
396.667 513.1665 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d379.917 511.6665 m
396.167 504.9165 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M402.6875 502.208 m
391.9395 502.271 l
395.6797 505.1191 l
395.0576 509.7783 l
402.6875 502.208 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d349.083 514.083 m
349.167 513.1665 l
349.583 512.25 l
350.25 511.4165 l
351.167 510.5 l
352.417 509.6665 l
353.917 508.75 l
355.667 507.917 l
357.667 507.167 l
359.833 506.417 l
362.25 505.667 l
364.75 505 l
367.5 504.4165 l
370.25 503.9165 l
373.167 503.5 l
376.167 503.1665 l
379.167 502.8335 l
382.25 502.667 l
385.167 502.5835 l
388.167 502.5 l
391 502.5835 l
393.75 502.75 l
396.417 503 l
398.833 503.3335 l
401.167 503.75 l
403.25 504.167 l
405.083 504.75 l
406.667 505.3335 l
408.083 506 l
409.167 506.75 l
409.917 507.5 l
410.417 508.3335 l
410.667 509.167 l
410.583 510.0835 l
410.167 511 l
409.5 511.8335 l
408.583 512.75 l
407.333 513.6665 l
405.833 514.5 l
404.083 515.3335 l
402.167 516.0835 l
399.917 516.8335 l
397.583 517.5835 l
395 518.25 l
392.333 518.8335 l
389.5 519.3335 l
386.583 519.75 l
383.583 520.0835 l
380.583 520.4165 l
377.583 520.5835 l
374.583 520.6665 l
371.583 520.75 l
368.75 520.6665 l
366 520.5 l
363.333 520.25 l
360.917 519.9165 l
358.583 519.5835 l
356.5 519.0835 l
354.667 518.5 l
353.083 517.9165 l
351.75 517.25 l
350.667 516.5 l
349.833 515.75 l
349.333 514.9165 l
349.083 514.083 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d334.167 506.25 m
351.833 506.25 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M358.8936 506.25 m
348.9434 502.1851 l
351.3047 506.25 l
348.9434 510.3145 l
358.8936 506.25 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d304.8335 496.6665 m
305.25 495.9165 l
305.9165 495.25 l
306.9165 494.6665 l
308.083 494.1665 l
309.583 493.8335 l
311.333 493.6665 l
313.25 493.5 l
315.333 493.5835 l
317.667 493.6665 l
320.167 494 l
322.75 494.3335 l
325.5 494.8335 l
328.25 495.4165 l
331.167 496.1665 l
334 496.9165 l
336.917 497.8335 l
339.75 498.8335 l
342.583 499.8335 l
345.333 501 l
347.917 502.1665 l
350.417 503.3335 l
352.75 504.5835 l
354.917 505.8335 l
356.917 507.083 l
358.583 508.25 l
360.083 509.5 l
361.333 510.6665 l
362.333 511.833 l
363.083 512.9165 l
363.5 513.9165 l
363.667 514.9165 l
363.583 515.75 l
363.167 516.5 l
362.417 517.1665 l
361.5 517.75 l
360.25 518.25 l
358.833 518.583 l
357.083 518.8335 l
355.167 518.9165 l
353 518.9165 l
350.75 518.75 l
348.25 518.5 l
345.667 518.0835 l
342.917 517.5835 l
340.083 517 l
337.25 516.25 l
334.333 515.5 l
331.5 514.5835 l
328.583 513.5835 l
325.833 512.583 l
323.083 511.5 l
320.417 510.3335 l
317.917 509.0835 l
315.583 507.9165 l
313.5 506.6665 l
311.5 505.4165 l
309.75 504.1665 l
308.25 502.9165 l
307 501.75 l
306 500.5835 l
305.3335 499.5 l
304.8335 498.5 l
304.75 497.5835 l
304.8335 496.667 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d294.0835 483.75 m
310.333 490.5 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M316.8535 493.2085 m
309.2246 485.6377 l
309.8457 490.2974 l
306.1055 493.145 l
316.8535 493.2085 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d270.5835 463.6665 m
271.25 463.1665 l
272.1665 462.75 l
273.25 462.5835 l
274.5835 462.6665 l
276.0835 462.9165 l
277.75 463.333 l
279.5 464 l
281.5 464.833 l
283.5835 465.833 l
285.75 467 l
288 468.4165 l
290.3335 469.9165 l
292.75 471.5 l
295.0835 473.25 l
297.4165 475.083 l
299.75 477.083 l
302.0835 479.083 l
304.25 481.0835 l
306.3335 483.1665 l
308.333 485.25 l
310.167 487.25 l
311.833 489.3335 l
313.333 491.25 l
314.667 493.1665 l
315.833 495 l
316.75 496.6665 l
317.417 498.25 l
317.917 499.6665 l
318.167 501 l
318.167 502.0835 l
318 503 l
317.5 503.75 l
316.833 504.3335 l
316 504.6665 l
314.833 504.833 l
313.583 504.833 l
312.083 504.583 l
310.417 504.1665 l
308.583 503.5 l
306.5835 502.6665 l
304.5 501.6665 l
302.3335 500.4165 l
300.0835 499.083 l
297.75 497.583 l
295.4165 496 l
293 494.25 l
290.6665 492.333 l
288.3335 490.4165 l
286.0835 488.4165 l
283.8335 486.4165 l
281.75 484.333 l
279.8335 482.25 l
277.9165 480.1665 l
276.25 478.1665 l
274.75 476.1665 l
273.4165 474.333 l
272.25 472.5 l
271.3335 470.75 l
270.6665 469.25 l
270.1665 467.75 l
269.9165 466.5 l
269.9165 465.4165 l
270.1665 464.4165 l
270.5835 463.6665 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d265.5835 447.5835 m
278 460.0835 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M282.9756 465.0928 m
278.8477 455.1689 l
277.6279 459.709 l
273.0801 460.8979 l
282.9756 465.0928 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d251.5835 420.0835 m
252.4165 419.8335 l
253.3335 419.8335 l
254.4165 420.1665 l
255.6665 420.6665 l
256.9165 421.5 l
258.25 422.5 l
259.75 423.8335 l
261.1665 425.3335 l
262.75 427.0835 l
264.3335 429 l
265.9165 431.083 l
267.4165 433.4165 l
269 435.833 l
270.5 438.333 l
272 440.9165 l
273.4165 443.583 l
274.75 446.333 l
276 449.083 l
277.1665 451.75 l
278.1665 454.4165 l
279.0835 457.083 l
279.9165 459.583 l
280.5 462 l
281 464.25 l
281.4165 466.333 l
281.5835 468.25 l
281.6665 470 l
281.5 471.5 l
281.25 472.75 l
280.8335 473.833 l
280.25 474.583 l
279.583 475.083 l
278.75 475.333 l
277.75 475.333 l
276.75 475.083 l
275.5 474.583 l
274.25 473.75 l
272.833 472.6665 l
271.4165 471.4165 l
269.9165 469.9165 l
268.4165 468.1665 l
266.833 466.25 l
265.25 464.083 l
263.6665 461.833 l
262.1665 459.4165 l
260.5835 456.9165 l
259.1665 454.25 l
257.75 451.583 l
256.4165 448.9165 l
255.1665 446.1665 l
254 443.4165 l
253 440.75 l
252.0835 438.1665 l
251.25 435.6665 l
250.5835 433.25 l
250.0835 431 l
249.75 428.9165 l
249.5835 427 l
249.5 425.25 l
249.6665 423.75 l
249.9165 422.4165 l
250.3335 421.4165 l
250.8335 420.6665 l
251.5835 420.0835 l
S/BBAccumRotation (0.000000) XT
u1 w []0 d253.0835 403.3335 m
259.8335 419.5835 l
S/BBAccumRotation (0.000000) XT
0 O
0 g
800 Ar
0 j 4 M262.542 426.104 m
262.479 415.356 l
259.6309 419.0962 l
254.9717 418.4746 l
262.542 426.104 l
fU0 R
0 G
300 Ar
1 j 0.5 w 10 M [4 ]0 d250.6665 372.583 m
251.5 372.667 l
252.4165 373 l
253.3335 373.667 l
254.1665 374.667 l
255.0835 375.833 l
255.9165 377.333 l
256.75 379.083 l
257.5835 381.083 l
258.3335 383.25 l
259 385.667 l
259.6665 388.25 l
260.25 390.917 l
260.75 393.75 l
261.25 396.6665 l
261.5835 399.6665 l
261.8335 402.6665 l
262.0835 405.6665 l
262.1665 408.6665 l
262.1665 411.5835 l
262.0835 414.5 l
262 417.25 l
261.75 419.8335 l
261.4165 422.3335 l
261 424.5835 l
260.5 426.6665 l
260 428.5 l
259.3335 430.1665 l
258.6665 431.5 l
257.9165 432.5835 l
257.1665 433.4165 l
256.3335 433.9165 l
255.5 434.0835 l
254.6665 434 l
253.75 433.6665 l
252.8335 433 l
252 432 l
251.0835 430.8335 l
250.25 429.3335 l
249.4165 427.5835 l
248.5835 425.5835 l
247.8335 423.4165 l
247.1665 421 l
246.5 418.4165 l
245.9165 415.75 l
245.4165 412.9165 l
244.9165 410 l
244.5835 407 l
244.3335 404 l
244.0835 401 l
244 398 l
244 395.0835 l
244.0835 392.167 l
244.25 389.417 l
244.4165 386.833 l
244.75 384.333 l
245.1665 382.083 l
245.6665 380 l
246.1665 378.167 l
246.8335 376.5 l
247.5 375.167 l
248.25 374.083 l
249 373.25 l
249.8335 372.75 l
250.6665 372.583 l
S/BBAccumRotation (0.000000) XT
U/BBAccumRotation (0.000000) XT
U/BBAccumRotation (0.000000) XT
U/BBAccumRotation (0.000000) XT
1 Ap
800 Ar
0 j 1 w 4 M []0 d529 218.333 m
83 218.333 L
83 571.6665 L
529 571.6665 L
529 218.333 L
sLB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
